// Recursive.cpp : 


#include <iostream>
#include <locale.h>
#include <Windows.h>
#include <conio.h>

using namespace std;
enum Color { Black = 0, Blue, Green, Cyan, Red, Magenta, Brown, LightGray, DarkGray, LightBlue, LightGreen, LightCyan, LightRed, LightMagenta, Yellow, White };
enum Direction { Up = 72, Left = 75, Right = 77, Down = 80, Enter = 13, esc = 27, spase = 32 };
HANDLE hStdOut = GetStdHandle(STD_OUTPUT_HANDLE);//получает дискриптор активного окна

void SetColor(Color text, Color background)
{
    SetConsoleTextAttribute(hStdOut, (WORD)((background << 4) | text));
}
void SetCursor(int x, int y)
{
    COORD myCoords = { x,y };//инициализируем передаваемыми значениями объект координат
    SetConsoleCursorPosition(hStdOut, myCoords);
}
int menu();

int Fact(int n,int b=1,int i=1);
int Step(int n, int b, int i = 1,int c=1);
int Fib(int i,int c=1,int n=0, int b=0 );
int Fib2(int i, int c = 1, int n = 0, int b = 0);
int Factorial(int n);
int power(int a, int n);
int main()
{
    setlocale(LC_ALL, "RUS");
    int poz = 0;
    poz = menu();
    system("cls");
    int n = 0;
    switch (poz)
    {
    case 0:
    {
        

        cout << "Введите Факториал какого чяисла нужно получить " << endl; cin >> n;
       
        cout << "|||" <<Factorial(n) << "|||";
        break;
    }

    case 1:
    {
        
       

       
        int a = 0, b = 0;
            cout << endl;
            cout << "Введите число которое нужно возвести в степень" << endl;
            cin >> a;
            cout << "Введите число в какую степень возвести число" << endl;
            cin >> b;

            cout << "|||" << Step(a,b) << "|||";
            break;
    }

    case 2:
    {
        
        int a=0;
        cout << "Введите основание и степень"; cin >> a;
        cin >> n;
        cout<<power(a, n);

        break;
    }
    case 3:
    {
       
        int i = 0;

        cout << "ДО какого числа "; cin >> i;
        cout << Fib2(i);

        break;
    }


    case 4:
    {
        
        int i = 0;

        cout << "ДО какого предела "; cin >> i;
       cout<< Fib(i);


    }

    




    }













}
int menu()
{
    char menu[6][50] = { "Факториал","Возвеедение в сепень","степень 2 вариант","Ряд фибоначи до предела","Ряд фибоначи до зад числа","нет ничего" };//Пункты меню
    int poz = 0, key;//поз-пункта меню, кей-кнопка нажатия

    for (int i = 0; i < 6; i++)//Рисовка меню
    {
        SetCursor(15, 10 + i);
        cout << menu[i];

    }
    do {
        for (int i = 0; i < 6; i++)//изменения цвета выбронного пункта
        {
            SetCursor(15, 10 + i);

            if (i == poz)
            {
                SetColor(Red, Black);
            }
            else
            {
                SetColor(White, Black);
            }

            cout << menu[i];

        }

        key = _getch();
        switch (key)
        {
        case Up:
        {	poz--;
        if (poz < 0)
        {
            poz = 5;
        }
        break;
        }
        case Down:
        {
            poz++;
            if (poz > 5)
            {
                poz = 0;
            }
            break;
        }
        case Enter:
        {
            SetColor(White, Black);
            return(poz);//возвращение выбронного пункта меню
        }


        }

    } while (true);







}

int Fact(int n,int b,int i)
{
    if (n == 0)
    {
        return b;
    }

    b = b * i;

    Fact(n - 1, b, i + 1);
        
}
int Step(int n, int b, int i,int c)
{
    if (c == 1)
    {
        c = n;
    }
    if (i == b)
    {
        return c;
    }
    Step(n, b, i + 1,c*n);


}
int Fib(int i,int c,int n, int b )
{
    if (i == 0)
    {
        return b;
    }
   
    n = b;
    b = c;
    c = n + b;
    cout << n << "\t";

    Fib(i-1,c,n,b);

}
int Fib2(int i, int c, int n, int b)
{
    if (i<=c)
    {
        return c;
    }

    n = b;
    b = c;
    c = n + b;
    cout << n << "\t";

    Fib2(i, c, n, b);
}
int Factorial(int n)
{
    /*if (n == 0)
    {
        return 1;
    }

    return n*Factorial(n - 1);*/
    return n == 0 ? 1 : n * Factorial(n - 1);
}
int power(int a, int n)
{
    /*if (n == 0)return 1;
    else if (n < 0)return 1 / a * power(a, n + 1);
    else return a * power(a, n - 1);*/

    return n == 0 ? 1: n > 0 ? a * power(a, n - 1) : 1 / a * power(a, n + 1);
}
